<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog mr-5" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Choose promotion figure</h5>
            </div>
            <div class="modal-body row">
                @if (Pieces != null)
                {
                    @foreach (var piece in Pieces)
                    {
                        var localPiece = piece;
                        <button type="button" @onclick="() => PieceSelected(localPiece.Item1)" class="btn btn-primary col ml-2 mr-2">@(localPiece.Item2)</button>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => PieceSelected()">Cancel</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {
    [Parameter]
    public Action<char?>? OnModalClosed { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public char? ChosenPiece { get; set; }
    public List<(char, char)>? Pieces;
    public void PieceSelected(char? piece = null)
    {
        ChosenPiece = piece;
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        OnModalClosed?.Invoke(ChosenPiece);
    }

    public void Open(List<(char, char)> promotionPieces)
    {
        Pieces = promotionPieces;
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }
}